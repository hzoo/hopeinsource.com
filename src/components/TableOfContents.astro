---
interface TOCHeading {
  slug: string;
  text: string;
}

interface Props {
  headings: TOCHeading[];
}

const { headings } = Astro.props;
---

{headings.length > 0 && (
  <nav class="rounded-lg p-4 mb-8 bg-his-chat-other lg:sticky lg:top-8">
    <ul class="list-none p-0">
      {headings.map((heading) => (
        <li class="mb-2">
          <a
            href={`#${heading.slug}`}
            class="toc-link rounded-md no-underline transition-colors duration-300 hover:opacity-80 p-1"
            data-heading-id={heading.slug}
          >
            {heading.text}
          </a>
        </li>
      ))}
    </ul>
  </nav>
)}

<script>
  let currentActiveLink: HTMLElement | null = null;

  function setActiveLink(id: string) {
    const correspondingLink = document.querySelector(`.toc-link[data-heading-id="${id}"]`) as HTMLElement;
    if (currentActiveLink) {
      currentActiveLink.classList.remove('active');
    }
    if (correspondingLink) {
      correspondingLink.classList.add('active');
      currentActiveLink = correspondingLink;
    }
  }

  const observer = new IntersectionObserver(
    (entries) => {
      for (const entry of entries) {
        if (entry.isIntersecting) {
          setActiveLink(entry.target.id);
        }
      }
    },
    { rootMargin: '-10% 0px -80% 0px' }
  );

  const headingElements = document.querySelectorAll('h4');
  headingElements.forEach((heading) => observer.observe(heading));

  window.addEventListener('hashchange', () => {
    const hash = window.location.hash;
    const targetElement = document.querySelector(hash);
    if (targetElement) {
      setActiveLink(targetElement.id);
    }
  });
</script> 