---
interface TOCHeading {
  slug: string;
  text: string;
}

interface Props {
  headings: TOCHeading[];
}

const { headings } = Astro.props;
---

{headings.length > 0 && (
  <nav class="toc">
    <ul>
      {headings.map((heading) => (
        <li>
          <a
            href={`#${heading.slug}`}
            class="toc-link"
            data-heading-id={heading.slug}
          >
            {heading.text}
          </a>
        </li>
      ))}
    </ul>
  </nav>
)}

<script>
  let currentActiveLink: HTMLElement | null = null;

  const observer = new IntersectionObserver(
    (entries) => {
      for (const entry of entries) {
        if (entry.isIntersecting) {
          const id = entry.target.id;
          const correspondingLink = document.querySelector(
            `.toc-link[data-heading-id="${id}"]`
          ) as HTMLElement;

          if (currentActiveLink) {
            currentActiveLink.classList.remove('active');
          }

          if (correspondingLink) {
            correspondingLink.classList.add('active');
            currentActiveLink = correspondingLink;
          }
        }
      }
    },
    { rootMargin: '-10% 0px -80% 0px' }
  );

  const headingElements = document.querySelectorAll('h4');
  headingElements.forEach((heading) => observer.observe(heading));
</script> 