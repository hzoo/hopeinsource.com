---
import { getCollection } from 'astro:content';
import HomeLayout from '../layouts/HomeLayout.astro';
import EpLayout from '../layouts/EpLayout.astro';

export async function getStaticPaths() {
  const podcastEntries = await getCollection('podcast');
  return podcastEntries.map(entry => ({
    params: { slug: entry.slug.split('/').pop() }, // This line is changed
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content, headings } = await entry.render();

const h4Headings = headings.filter(h => h.depth === 4);
---

<HomeLayout>
<div class="container">
    <div class="content-wrapper">
        <EpLayout frontmatter={entry.data} slug={`/${entry.slug.split('/').pop()}`}>
            <Content />
        </EpLayout>
    </div>
    <aside class="sidebar">
        <nav class="toc">
            <ul>
                {h4Headings.map(heading => (
                    <li>
                      <a href={`#${heading.slug}`} class="toc-link" data-heading-id={heading.slug}>{heading.text}</a>
                    </li>
                ))}
            </ul>
        </nav>
    </aside>
</div>
</HomeLayout>

<script>
  let currentActiveLink: HTMLElement | null = null;

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const id = entry.target.id;
        const correspondingLink = document.querySelector(`.toc-link[data-heading-id="${id}"]`) as HTMLElement;

        if (currentActiveLink) {
          currentActiveLink.classList.remove('active');
        }

        if (correspondingLink) {
          correspondingLink.classList.add('active');
          currentActiveLink = correspondingLink;
        }
      }
    });
  }, { rootMargin: '-10% 0px -80% 0px' });

  document.addEventListener('DOMContentLoaded', () => {
    const headings = document.querySelectorAll('h4');
    headings.forEach(heading => observer.observe(heading));
  });
</script>

<style>
.toc-link.active {
  font-weight: bold;
  background-color: #4F5B66;
}
</style>
